var request = require('request');
var _ = require('underscore');
var tournament_sm = require('StickerMap').TournamentStickerMap;
var team_sm = require('StickerMap').TeamStickerMap;
var team_map = require('StickerMap').TeamMap;
var tournament_map = require('StickerMap').TournamentMap;
var MongoClient = require('mongodb').MongoClient;
var test = require('assert');
var db_name = "oxlef";
var db_url = "mongodb://localhost:27017/oxlefdb";

MongoClient.connect(db_url, function (err, db) {

	//id = [stickername], full=[Boolean: get full sales history], time=[Integer: past x days avg/median summary]
	var get_data = function(id, callback, callback_params, full, time) {
		var base_api = "http://csgobackpack.net/api/GetItemPrice/";
		var params = {"currency": "USD", "id": id};

		if(full) {
			params["full"] = full;
		}
		if(time) {
			params["time"] = time;
		}
		
		//Construct api call request string
		var api_call = base_api;
		var index = 0;
		_.each(params, function(value, key) {
			if(index == 0) {
				api_call += "?";
			} else {
				api_call += "&";
			}
			api_call += key + "=" + encodeURI(value);
			++index;
		});

		console.log("Making request to: " + api_call);
		request(api_call, function (error, response, body) {
			if (!error && response.statusCode == 200) {
				callback_params.unshift(JSON.parse(body));
				callback.apply(callback, callback_params);
				return true;
			}
		});
	}

	var store_data = function(data, tournament, team, sticker_type) {
			_.each(data, function(entry, index) {
				var datetime = entry[0];
				var price = entry[1];
				var quantity = entry[2];

				db.collection(db_name).update( 
					{ "team": team, "tournament": tournament, "datetime": /.*datetime.substring(0, 11).*/, "type": sticker_type},
					{ $setOnInsert:
						{
							"team": team,
							"tournament": tournament,
							"type": sticker_type,
							"datetime": datetime,
							"price": price,
							"quantity": quantity
						}
					},
					{ upsert: true },
					function(err, result) {
						test.equal(err, null);
						if(result.result.hasOwnProperty("upserted")) {
							console.log("Inserted entry: "+team+"; "+tournament+"; "+sticker_type+"; "+datetime+";");
						} else {
							console.log("Exists... Skipping: '"+team+"'; "+tournament+"; "+sticker_type+"; "+datetime+";");
						}
					}
				);
			});
	}

	var migrate_tournament = function(tournament) {
		//(stickers, sticker-type, index)
		_.each(tournament_sm[tournament], function(value, sticker_type, index) {
			_.each(value, function(sticker, team) {
				var result = JSON.parse(get_data(sticker, true));
				store_data(result, tournament, team, sticker_type);
			});
		});
	}

	var migrate_team = function(team) {
		//(stickers, sticker-type, index)
		_.each(team_sm[team], function(value, sticker_type, index) {
			_.each(value, function(sticker, tournament) {
				get_data(sticker, store_data, [tournament, team, sticker_type], true);
			});
		});	
	}

	var initialize_teams = function() {
		//Initialize Teams
		_.each(team_map, function(value, key, index) {
			db.collection(db_name).update( 
				{ "_id": key },
				{ $setOnInsert:
					{
						"_id": key,
						"name": key,
						"abbreviation": value,
						"stats": {}
					},
				}, 
				{ upsert: true },
				function(err, result) {
					test.equal(err, null);
					if(result.result.hasOwnProperty("upserted")) {
						console.log("Team Inserted: '"+key+"'.");
					} else {
						console.log("Team Exists: '"+key+"'.");
					}
				}
			);
		});
	}

	var initialize_tournaments = function() {
		//Initialize Tournaments
		_.each(tournament_map, function(value, key, index) {
			db.collection(db_name).update( 
				{ "_id": key },
				{ $setOnInsert:
					{
						"_id": key,
						"name": key,
						"fullname": value["fullname"],
						"location": value["location"],
						"prizepool": value["prizepool"],
						"start": value["start"],
						"end": value["end"],
						"stats": {}
					}
				},
				{ upsert: true },
				function(err, result) {
					test.equal(err, null);
					if(result.result.hasOwnProperty("upserted")) {
						console.log("Tournament Inserted: '"+key+"'.");
					} else {
						console.log("Tournament Exists: '"+key+"'.");
					}
				}
			);
		});
	}

	/** 
	**	Main
	**/
	//initialize_teams();
	//initialize_tournaments();

	migrate_team("Cloud9");
	//migrate_tournament("Katowice 2015");

});